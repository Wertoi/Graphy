<Application
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:local="clr-namespace:Graphy"
             xmlns:conv="clr-namespace:Graphy.Converter"
             xmlns:vm="clr-namespace:Graphy.ViewModel"
             xmlns:sys="clr-namespace:System;assembly=mscorlib"
             xmlns:Themes="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero2" x:Class="Graphy.App"
             StartupUri="MainWindow.xaml">
    <Application.Resources>


        <!-- LOCATOR -->
        <vm:ViewModelLocator x:Key="Locator"/>

        <!-- CONVERTERS -->
        <conv:BooleanToVisibilityConverter True="Visible" False="Collapsed" x:Key="BooleanToVisibilityConverter"/>
        <conv:BooleanToVisibilityConverter True="Collapsed" False="Visible" x:Key="InvertBooleanToVisibilityConverter"/>
        <conv:EnumToCollectionConverter x:Key="EnumToCollectionConverter"/>
        <conv:LocalizedEnumToStringConverter x:Key="LocalizedEnumToStringConverter"/>
        <conv:BooleanToBooleanConverter x:Key="InvertBooleanConverter" True="False" False="True"/>


        <!-- ***** ICONS ***** -->
        
        <!-- ICONS OPACITY VALUES -->
        <sys:Double x:Key="FocusIconOpacity">0.87</sys:Double>
        <sys:Double x:Key="NormalIconOpacity">0.54</sys:Double>
        <sys:Double x:Key="InactiveIconOpacity">0.38</sys:Double>

        <!-- ICON VIEWBOX STYLE -->
        <Style x:Key="IconViewBox" TargetType="{x:Type Viewbox}">
            <Setter Property="Width" Value="24"/>
            <Setter Property="Height" Value="24"/>
            <Setter Property="Margin" Value="3"/>
        </Style>

        <!-- ICON CANVAS STYLE-->
        <Style x:Key="IconCanvas" TargetType="{x:Type Canvas}">
            <Setter Property="Width" Value="24"/>
            <Setter Property="Height" Value="24"/>
        </Style>
        
        <!-- *** ICON FOR BUTTON *** -->

        <!-- LINK ICON PATH STYLE -->
        <Style x:Key="LinkIcon" TargetType="{x:Type Path}">
            <Setter Property="Data" Value="M3.9,12C3.9,10.29 5.29,8.9 7,8.9H11V7H7A5,5 0 0,0 2,12A5,5 0 0,0 7,17H11V15.1H7C5.29,15.1 3.9,13.71 3.9,12M8,13H16V11H8V13M17,7H13V8.9H17C18.71,8.9 20.1,10.29 20.1,12C20.1,13.71 18.71,15.1 17,15.1H13V17H17A5,5 0 0,0 22,12A5,5 0 0,0 17,7Z"/>
            <Setter Property="Fill" Value="Black"/>
            <Setter Property="Opacity" Value="{StaticResource NormalIconOpacity}"/>
            <Style.Triggers>
                <DataTrigger Binding="{Binding IsEnabled, RelativeSource={RelativeSource AncestorType={x:Type Button}, Mode=FindAncestor}}" Value="False">
                    <Setter Property="Opacity" Value="{StaticResource InactiveIconOpacity}"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding IsFocused, RelativeSource={RelativeSource AncestorType={x:Type Button}, Mode=FindAncestor}}" Value="True">
                    <Setter Property="Opacity" Value="{StaticResource FocusIconOpacity}"/>
                </DataTrigger>
            </Style.Triggers>
        </Style>

        <!-- REFRESH ICON PATH STYLE -->
        <Style x:Key="RefreshIcon" TargetType="{x:Type Path}">
            <Setter Property="Data" Value="M19,8L15,12H18A6,6 0 0,1 12,18C11,18 10.03,17.75 9.2,17.3L7.74,18.76C8.97,19.54 10.43,20 12,20A8,8 0 0,0 20,12H23M6,12A6,6 0 0,1 12,6C13,6 13.97,6.25 14.8,6.7L16.26,5.24C15.03,4.46 13.57,4 12,4A8,8 0 0,0 4,12H1L5,16L9,12"/>
            <Setter Property="Fill" Value="Black"/>
            <Setter Property="Opacity" Value="{StaticResource NormalIconOpacity}"/>
            <Style.Triggers>
                <DataTrigger Binding="{Binding IsEnabled, RelativeSource={RelativeSource AncestorType={x:Type Button}, Mode=FindAncestor}}" Value="False">
                    <Setter Property="Opacity" Value="{StaticResource InactiveIconOpacity}"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding IsFocused, RelativeSource={RelativeSource AncestorType={x:Type Button}, Mode=FindAncestor}}" Value="True">
                    <Setter Property="Opacity" Value="{StaticResource FocusIconOpacity}"/>
                </DataTrigger>
            </Style.Triggers>
        </Style>

        <!-- ADD ICON PATH STYLE -->
        <Style x:Key="AddIcon" TargetType="{x:Type Path}">
            <Setter Property="Data" Value="M19,13H13V19H11V13H5V11H11V5H13V11H19V13Z"/>
            <Setter Property="Fill" Value="Black"/>
            <Setter Property="Opacity" Value="{StaticResource NormalIconOpacity}"/>
            <Style.Triggers>
                <DataTrigger Binding="{Binding IsEnabled, RelativeSource={RelativeSource AncestorType={x:Type Button}, Mode=FindAncestor}}" Value="False">
                    <Setter Property="Opacity" Value="{StaticResource InactiveIconOpacity}"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding IsFocused, RelativeSource={RelativeSource AncestorType={x:Type Button}, Mode=FindAncestor}}" Value="True">
                    <Setter Property="Opacity" Value="{StaticResource FocusIconOpacity}"/>
                </DataTrigger>
            </Style.Triggers>
        </Style>

        <!-- PARAMETERS ICON PATH STYLE -->
        <Style x:Key="ParameterIcon" TargetType="{x:Type Path}">
            <Setter Property="Data" Value="M12,15.5A3.5,3.5 0 0,1 8.5,12A3.5,3.5 0 0,1 12,8.5A3.5,3.5 0 0,1 15.5,12A3.5,3.5 0 0,1 12,15.5M19.43,12.97C19.47,12.65 19.5,12.33 19.5,12C19.5,11.67 19.47,11.34 19.43,11L21.54,9.37C21.73,9.22 21.78,8.95 21.66,8.73L19.66,5.27C19.54,5.05 19.27,4.96 19.05,5.05L16.56,6.05C16.04,5.66 15.5,5.32 14.87,5.07L14.5,2.42C14.46,2.18 14.25,2 14,2H10C9.75,2 9.54,2.18 9.5,2.42L9.13,5.07C8.5,5.32 7.96,5.66 7.44,6.05L4.95,5.05C4.73,4.96 4.46,5.05 4.34,5.27L2.34,8.73C2.21,8.95 2.27,9.22 2.46,9.37L4.57,11C4.53,11.34 4.5,11.67 4.5,12C4.5,12.33 4.53,12.65 4.57,12.97L2.46,14.63C2.27,14.78 2.21,15.05 2.34,15.27L4.34,18.73C4.46,18.95 4.73,19.03 4.95,18.95L7.44,17.94C7.96,18.34 8.5,18.68 9.13,18.93L9.5,21.58C9.54,21.82 9.75,22 10,22H14C14.25,22 14.46,21.82 14.5,21.58L14.87,18.93C15.5,18.67 16.04,18.34 16.56,17.94L19.05,18.95C19.27,19.03 19.54,18.95 19.66,18.73L21.66,15.27C21.78,15.05 21.73,14.78 21.54,14.63L19.43,12.97Z"/>
            <Setter Property="Fill" Value="Black"/>
            <Setter Property="Opacity" Value="{StaticResource NormalIconOpacity}"/>
            <Style.Triggers>
                <DataTrigger Binding="{Binding IsEnabled, RelativeSource={RelativeSource AncestorType={x:Type Button}, Mode=FindAncestor}}" Value="False">
                    <Setter Property="Opacity" Value="{StaticResource InactiveIconOpacity}"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding IsFocused, RelativeSource={RelativeSource AncestorType={x:Type Button}, Mode=FindAncestor}}" Value="True">
                    <Setter Property="Opacity" Value="{StaticResource FocusIconOpacity}"/>
                </DataTrigger>
            </Style.Triggers>
        </Style>

        <!-- SELECT ICON PATH STYLE -->
        <Style x:Key="SelectIcon" TargetType="{x:Type Path}">
            <Setter Property="Data" Value="M5,3C3.89,3 3,3.89 3,5V19A2,2 0 0,0 5,21H19A2,2 0 0,0 21,19V12H19V19H5V5H12V3H5M17.78,4C17.61,4 17.43,4.07 17.3,4.2L16.08,5.41L18.58,7.91L19.8,6.7C20.06,6.44 20.06,6 19.8,5.75L18.25,4.2C18.12,4.07 17.95,4 17.78,4M15.37,6.12L8,13.5V16H10.5L17.87,8.62L15.37,6.12Z"/>
            <Setter Property="Fill" Value="Black"/>
            <Setter Property="Opacity" Value="{StaticResource NormalIconOpacity}"/>
            <Style.Triggers>
                <DataTrigger Binding="{Binding IsEnabled, RelativeSource={RelativeSource AncestorType={x:Type Button}, Mode=FindAncestor}}" Value="False">
                    <Setter Property="Opacity" Value="{StaticResource InactiveIconOpacity}"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding IsFocused, RelativeSource={RelativeSource AncestorType={x:Type Button}, Mode=FindAncestor}}" Value="True">
                    <Setter Property="Opacity" Value="{StaticResource FocusIconOpacity}"/>
                </DataTrigger>
            </Style.Triggers>
        </Style>
        
        <!-- UPDATE ICON -->
        <Style x:Key="UpdateButtonIcon" TargetType="{x:Type Path}">
            <Setter Property="Data" Value="M21,10.12H14.22L16.96,7.3C14.23,4.6 9.81,4.5 7.08,7.2C4.35,9.91 4.35,14.28 7.08,17C9.81,19.7 14.23,19.7 16.96,17C18.32,15.65 19,14.08 19,12.1H21C21,14.08 20.12,16.65 18.36,18.39C14.85,21.87 9.15,21.87 5.64,18.39C2.14,14.92 2.11,9.28 5.62,5.81C9.13,2.34 14.76,2.34 18.27,5.81L21,3V10.12M12.5,8V12.25L16,14.33L15.28,15.54L11,13V8H12.5Z"/>
            <Setter Property="Fill" Value="Black"/>
            <Setter Property="Opacity" Value="{StaticResource NormalIconOpacity}"/>
            <Style.Triggers>
                <DataTrigger Binding="{Binding IsEnabled, RelativeSource={RelativeSource AncestorType={x:Type Button}, Mode=FindAncestor}}" Value="False">
                    <Setter Property="Opacity" Value="{StaticResource InactiveIconOpacity}"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding IsFocused, RelativeSource={RelativeSource AncestorType={x:Type Button}, Mode=FindAncestor}}" Value="True">
                    <Setter Property="Opacity" Value="{StaticResource FocusIconOpacity}"/>
                </DataTrigger>
            </Style.Triggers>
        </Style>

        <!-- SELECT ALL BUTTON ICON PATH STYLE -->
        <Style x:Key="SelectAllIcon" TargetType="{x:Type Path}">
            <Setter Property="Data" Value="M9,9H15V15H9M7,17H17V7H7M15,5H17V3H15M15,21H17V19H15M19,17H21V15H19M19,9H21V7H19M19,21A2,2 0 0,0 21,19H19M19,13H21V11H19M11,21H13V19H11M9,3H7V5H9M3,17H5V15H3M5,21V19H3A2,2 0 0,0 5,21M19,3V5H21A2,2 0 0,0 19,3M13,3H11V5H13M3,9H5V7H3M7,21H9V19H7M3,13H5V11H3M3,5H5V3A2,2 0 0,0 3,5Z"/>
            <Setter Property="Fill" Value="Black"/>
            <Setter Property="Opacity" Value="{StaticResource NormalIconOpacity}"/>
            <Style.Triggers>
                <DataTrigger Binding="{Binding IsEnabled, RelativeSource={RelativeSource AncestorType={x:Type Button}, Mode=FindAncestor}}" Value="False">
                    <Setter Property="Opacity" Value="{StaticResource InactiveIconOpacity}"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding IsFocused, RelativeSource={RelativeSource AncestorType={x:Type Button}, Mode=FindAncestor}}" Value="True">
                    <Setter Property="Opacity" Value="{StaticResource FocusIconOpacity}"/>
                </DataTrigger>
            </Style.Triggers>
        </Style>

        <!-- UNSELECT ALL BUTTON ICON PATH STYLE -->
        <Style x:Key="UnselectAllIcon" TargetType="{x:Type Path}">
            <Setter Property="Data" Value="M22,3H7C6.31,3 5.77,3.35 5.41,3.88L0,12L5.41,20.11C5.77,20.64 6.31,21 7,21H22A2,2 0 0,0 24,19V5A2,2 0 0,0 22,3M19,15.59L17.59,17L14,13.41L10.41,17L9,15.59L12.59,12L9,8.41L10.41,7L14,10.59L17.59,7L19,8.41L15.41,12"/>
            <Setter Property="Fill" Value="Black"/>
            <Setter Property="Opacity" Value="{StaticResource NormalIconOpacity}"/>
            <Style.Triggers>
                <DataTrigger Binding="{Binding IsEnabled, RelativeSource={RelativeSource AncestorType={x:Type Button}, Mode=FindAncestor}}" Value="False">
                    <Setter Property="Opacity" Value="{StaticResource InactiveIconOpacity}"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding IsFocused, RelativeSource={RelativeSource AncestorType={x:Type Button}, Mode=FindAncestor}}" Value="True">
                    <Setter Property="Opacity" Value="{StaticResource FocusIconOpacity}"/>
                </DataTrigger>
            </Style.Triggers>
        </Style>

        <!-- BACK ICON PATH STYLE -->
        <Style x:Key="BackIcon" TargetType="{x:Type Path}">
            <Setter Property="Data" Value="M20,11V13H8L13.5,18.5L12.08,19.92L4.16,12L12.08,4.08L13.5,5.5L8,11H20Z"/>
            <Setter Property="Fill" Value="Black"/>
            <Setter Property="Opacity" Value="{StaticResource NormalIconOpacity}"/>
            <Style.Triggers>
                <DataTrigger Binding="{Binding IsEnabled, RelativeSource={RelativeSource AncestorType={x:Type Button}, Mode=FindAncestor}}" Value="False">
                    <Setter Property="Opacity" Value="{StaticResource InactiveIconOpacity}"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding IsFocused, RelativeSource={RelativeSource AncestorType={x:Type Button}, Mode=FindAncestor}}" Value="True">
                    <Setter Property="Opacity" Value="{StaticResource FocusIconOpacity}"/>
                </DataTrigger>
            </Style.Triggers>
        </Style>

        <!-- OPEN DOCUMENT PATH STYLE -->
        <Style x:Key="OpenDocumentIcon" TargetType="{x:Type Path}">
            <Setter Property="Data" Value="M6,2A2,2 0 0,0 4,4V20A2,2 0 0,0 6,22H18A2,2 0 0,0 20,20V8L14,2H6M6,4H13V9H18V20H6V4M8,12V14H16V12H8M8,16V18H13V16H8Z"/>
            <Setter Property="Fill" Value="Black"/>
            <Setter Property="Opacity" Value="{StaticResource NormalIconOpacity}"/>
            <Style.Triggers>
                <DataTrigger Binding="{Binding IsEnabled, RelativeSource={RelativeSource AncestorType={x:Type Button}, Mode=FindAncestor}}" Value="False">
                    <Setter Property="Opacity" Value="{StaticResource InactiveIconOpacity}"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding IsFocused, RelativeSource={RelativeSource AncestorType={x:Type Button}, Mode=FindAncestor}}" Value="True">
                    <Setter Property="Opacity" Value="{StaticResource FocusIconOpacity}"/>
                </DataTrigger>
            </Style.Triggers>
        </Style>

        <!-- OPEN FOLDER ICON PATH STYLE -->
        <Style x:Key="OpenFolderIcon" TargetType="{x:Type Path}">
            <Setter Property="Data" Value="M20,18H4V8H20M20,6H12L10,4H4C2.89,4 2,4.89 2,6V18A2,2 0 0,0 4,20H20A2,2 0 0,0 22,18V8C22,6.89 21.1,6 20,6Z"/>
            <Setter Property="Fill" Value="Black"/>
            <Setter Property="Opacity" Value="{StaticResource NormalIconOpacity}"/>
            <Style.Triggers>
                <DataTrigger Binding="{Binding IsEnabled, RelativeSource={RelativeSource AncestorType={x:Type Button}, Mode=FindAncestor}}" Value="False">
                    <Setter Property="Opacity" Value="{StaticResource InactiveIconOpacity}"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding IsFocused, RelativeSource={RelativeSource AncestorType={x:Type Button}, Mode=FindAncestor}}" Value="True">
                    <Setter Property="Opacity" Value="{StaticResource FocusIconOpacity}"/>
                </DataTrigger>
            </Style.Triggers>
        </Style>

        <!-- DROP DOWN BUTTON ICON PATH STYLE -->
        <Style x:Key="DropDownButtonIcon" TargetType="{x:Type Path}">
            <Setter Property="Data" Value="M7.41,8.58L12,13.17L16.59,8.58L18,10L12,16L6,10L7.41,8.58Z"/>
            <Setter Property="Fill" Value="Black"/>
            <Setter Property="Opacity" Value="{StaticResource NormalIconOpacity}"/>
            <Style.Triggers>
                <DataTrigger Binding="{Binding IsEnabled, RelativeSource={RelativeSource AncestorType={x:Type ToggleButton}, Mode=FindAncestor}}" Value="False">
                    <Setter Property="Opacity" Value="{StaticResource InactiveIconOpacity}"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding IsFocused, RelativeSource={RelativeSource AncestorType={x:Type ToggleButton}, Mode=FindAncestor}}" Value="True">
                    <Setter Property="Opacity" Value="{StaticResource FocusIconOpacity}"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding IsChecked, RelativeSource={RelativeSource AncestorType={x:Type ToggleButton}, Mode=FindAncestor}}" Value="True">
                    <Setter Property="Data" Value="M7.41,15.41L12,10.83L16.59,15.41L18,14L12,8L6,14L7.41,15.41Z"/>
                </DataTrigger>
            </Style.Triggers>
        </Style>
        
        
        <!-- *** ICON ONLY *** -->

        <!-- NO DOCUMENTATION ICON PATH STYLE -->
        <Style x:Key="NoDocumentIcon" TargetType="{x:Type Path}">
            <Setter Property="Data" Value="M19,5A2,2 0 0,0 17,3H10L7.66,5.34L19,16.68V5M3.65,3.88L2.38,5.15L5,7.77V19A2,2 0 0,0 7,21H17C17.36,21 17.68,20.9 17.97,20.74L19.85,22.62L21.12,21.35L3.65,3.88Z"/>
            <Setter Property="Fill" Value="Black"/>
            <Setter Property="Opacity" Value="{StaticResource InactiveIconOpacity}"/>
        </Style>

        <!-- IN PROGRESS ICON PATH STYLE -->
        <Style x:Key="InProgressIcon" TargetType="{x:Type Path}">
            <Setter Property="Data" Value="M12,20A8,8 0 0,1 4,12A8,8 0 0,1 12,4A8,8 0 0,1 20,12A8,8 0 0,1 12,20M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10,10 0 0,0 12,2M16.24,7.76C15.07,6.58 13.53,6 12,6V12L7.76,16.24C10.1,18.58 13.9,18.58 16.24,16.24C18.59,13.9 18.59,10.1 16.24,7.76Z"/>
            <Setter Property="Fill" Value="Black"/>
            <Setter Property="Opacity" Value="{StaticResource NormalIconOpacity}"/>
        </Style>

        <!-- CHECK OK ICON PATH STYLE -->
        <Style x:Key="CheckIcon" TargetType="{x:Type Path}">
            <Setter Property="Data" Value="M12,2A10,10 0 0,1 22,12A10,10 0 0,1 12,22A10,10 0 0,1 2,12A10,10 0 0,1 12,2M12,4A8,8 0 0,0 4,12A8,8 0 0,0 12,20A8,8 0 0,0 20,12A8,8 0 0,0 12,4M11,16.5L6.5,12L7.91,10.59L11,13.67L16.59,8.09L18,9.5L11,16.5Z"/>
            <Setter Property="Fill" Value="Black"/>
            <Setter Property="Opacity" Value="{StaticResource NormalIconOpacity}"/>
        </Style>

        <!-- INFO ICON PATH STYLE -->
        <Style x:Key="InfoIcon" TargetType="{x:Type Path}">
            <Setter Property="Data" Value="M11,9H13V7H11M12,20C7.59,20 4,16.41 4,12C4,7.59 7.59,4 12,4C16.41,4 20,7.59 20,12C20,16.41 16.41,20 12,20M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10,10 0 0,0 12,2M11,17H13V11H11V17Z"/>
            <Setter Property="Fill" Value="Black"/>
            <Setter Property="Opacity" Value="{StaticResource NormalIconOpacity}"/>
        </Style>

        <!-- ***** END OF ICONS ***** -->


        <!-- *** COLOR STATIC RESSOURCES *** -->
        <SolidColorBrush x:Key="Gray242" Color="#FFF2F2F2"/>
        <SolidColorBrush x:Key="Gray217" Color="#FFD9D9D9"/>
        <SolidColorBrush x:Key="Gray191" Color="#FFBFBFBF"/>
        <SolidColorBrush x:Key="Gray166" Color="#FFA6A6A6"/>
        <SolidColorBrush x:Key="Gray127" Color="#FF7F7F7F"/>

        <SolidColorBrush x:Key="PrimaryColor" Color="#FF1565c0"/>
        <SolidColorBrush x:Key="PrimaryColorLight" Color="#FF5e92f3"/>
        <SolidColorBrush x:Key="PrimaryColorDark" Color="#FF003c8f"/>
        <SolidColorBrush x:Key="SecondaryColor" Color="#FFFF7043"/>
        <SolidColorBrush x:Key="SecondaryColorLight" Color="#FFFFA270"/>
        <SolidColorBrush x:Key="SecondaryColorDark" Color="#FFC63F17"/>


        <!-- *** COMMON STYLES *** -->

        <!-- LABEL FORM TEXTBLOCK STYLE -->
        <Style x:Key="LabelFormTextBlock" TargetType="{x:Type TextBlock}">
            <Setter Property="VerticalAlignment" Value="Center"/>
            <Setter Property="Margin" Value="0,0,20,0"/>
            <Setter Property="HorizontalAlignment" Value="Left"/>
            <Setter Property="Foreground" Value="#FF262626"/>
        </Style>

        <!-- TOOLTIP STYLE -->
        <Style TargetType="{x:Type ToolTip}">
            <Setter Property="Placement" Value="Mouse"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ToolTip}">

                        <!-- Main Border -->
                        <Border x:Name="m_popupBorder" CornerRadius="5" Margin="0,0,4,4">
                            <Border.Effect>
                                <DropShadowEffect ShadowDepth="2" Color="#FF757575"/>
                            </Border.Effect>

                            <Grid>
                                <!-- Mask Border -->
                                <Border x:Name="m_maskBorder" Background="White" CornerRadius="{Binding ElementName=m_popupBorder, Path=CornerRadius}" BorderThickness="0.5"/>

                                <!-- Content -->
                                <ContentPresenter TextElement.Foreground="{StaticResource SecondaryColorDark}" Margin="10"/>

                            </Grid>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!-- READ ONLY TEXTBOX STYLE -->
        <Style x:Key="ReadOnlyTextBox" TargetType="{x:Type TextBox}">
            <Setter Property="IsReadOnly" Value="True"/>
            <Setter Property="Margin" Value="0,0,10,0"/>
            <Setter Property="Foreground" Value="#FFA6A6A6"/>
            <Setter Property="BorderThickness" Value="0"/>
            <Setter Property="VerticalAlignment" Value="Center"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="MaxWidth" Value="200"/>
        </Style>

        <!-- READ ONLY TEXTBOX UNDERLIGNED STYLE -->
        <Style x:Key="ReadOnlyUnderlignedTextBox" TargetType="{x:Type TextBox}" BasedOn="{StaticResource ReadOnlyTextBox}">
            <Setter Property="BorderThickness" Value="0,0,0,1"/>
            <Setter Property="BorderBrush" Value="#FFACACAC"/>
            <Setter Property="Padding" Value="0,10,0,5"/>
            <Setter Property="Margin" Value="0,2"/>
        </Style>

        <!-- NORMAL TEXTBOX STYLE -->
        <Style x:Key="NormalTextBox" TargetType="{x:Type TextBox}">
            <Setter Property="Margin" Value="0,0,10,0"/>
            <Setter Property="BorderThickness" Value="0,0,0,1"/>
            <Setter Property="VerticalAlignment" Value="Center"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Padding" Value="0,10,0,5"/>
            <Setter Property="BorderBrush" Value="#FFACACAC"/>
            <Setter Property="MaxWidth" Value="200"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type TextBox}">
                        <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                            <ScrollViewer x:Name="PART_ContentHost" Focusable="false" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter Property="Opacity" TargetName="border" Value="0.56"/>
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="BorderBrush" Value="{StaticResource SecondaryColor}"/>
                            </Trigger>
                            <Trigger Property="IsKeyboardFocused" Value="True">
                                <Setter Property="BorderBrush" Value="{StaticResource SecondaryColor}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!-- NORMAL BUTTON STYLE -->
        <Style x:Key="NormalButton" TargetType="{x:Type Button}">
            <Setter Property="Background" Value="{StaticResource Gray242}"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="BorderBrush" Value="Transparent"/>
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="HorizontalAlignment" Value="Center" />
            <Setter Property="VerticalAlignment" Value="Center" />
            <Setter Property="Padding" Value="1"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}"
                                SnapsToDevicePixels="True" CornerRadius="8">

                            <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}"
                                              RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Border>

                        <ControlTemplate.Triggers>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter Property="Opacity" TargetName="border" Value="0.56"/>
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Background" Value="{StaticResource Gray217}" />
                                <Setter Property="BorderBrush" Value="{StaticResource Gray191}" />
                            </Trigger>
                            <Trigger Property="IsPressed" Value="True">
                                <Setter Property="Background" Value="{StaticResource Gray191}" />
                                <Setter Property="BorderBrush" Value="{StaticResource Gray166}" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!-- NORMAL BUTTON DARKER STYLE -->
        <Style x:Key="NormalButtonDarker" TargetType="{x:Type Button}" BasedOn="{StaticResource NormalButton}">
            <Setter Property="Background" Value="{StaticResource Gray217}"/>
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background" Value="{StaticResource Gray191}" />
                    <Setter Property="BorderBrush" Value="{StaticResource Gray166}" />
                </Trigger>
                <Trigger Property="IsPressed" Value="True">
                    <Setter Property="Background" Value="{StaticResource Gray166}" />
                    <Setter Property="BorderBrush" Value="{StaticResource Gray127}" />
                </Trigger>
            </Style.Triggers>
        </Style>

        <!-- NORMAL TOGGLE BUTTON STYLE -->
        <Style x:Key="NormalToggleButton" TargetType="{x:Type ToggleButton}">
            <Setter Property="Background" Value="{StaticResource Gray242}"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="BorderBrush" Value="Transparent"/>
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="HorizontalAlignment" Value="Center" />
            <Setter Property="VerticalAlignment" Value="Center" />
            <Setter Property="Padding" Value="1"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                        <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}"
                                SnapsToDevicePixels="True" CornerRadius="8">

                            <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}"
                                              RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Border>

                        <ControlTemplate.Triggers>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter Property="Opacity" TargetName="border" Value="0.56"/>
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Background" Value="{StaticResource Gray217}" />
                                <Setter Property="BorderBrush" Value="{StaticResource Gray191}" />
                            </Trigger>
                            <Trigger Property="IsPressed" Value="True">
                                <Setter Property="Background" Value="{StaticResource Gray191}" />
                                <Setter Property="BorderBrush" Value="{StaticResource Gray166}" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!-- NORMAL CHECKBOX STYLE -->
        <Style TargetType="{x:Type CheckBox}" x:Key="NormalCheckBox">
            <Setter Property="Background" Value="White"/>
            <Setter Property="BorderBrush" Value="#FFA5A5A5"/>
            <Setter Property="Foreground" Value="#FF404040"/>
            <Setter Property="SnapsToDevicePixels" Value="True"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type CheckBox}">
                        <StackPanel Orientation="Horizontal">

                            <Border Height="18" Width="18" BorderThickness="2" CornerRadius="2" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}">
                                <Viewbox>
                                    <Canvas Style="{StaticResource IconCanvas}" Background="{TemplateBinding Background}">
                                        <Path x:Name="Check"
                                              Visibility="Collapsed"
                                              Data="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"
                                              Fill="White"/>
                                    </Canvas>
                                </Viewbox>
                            </Border>

                            <ContentPresenter TextElement.Foreground="{TemplateBinding Foreground}" VerticalAlignment="Center" Margin="5,0,0,0"/>
                        </StackPanel>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsChecked" Value="True">
                                <Setter Property="Background" Value="{Binding Source={StaticResource SecondaryColor}}"/>
                                <Setter Property="BorderBrush" Value="{Binding Source={StaticResource SecondaryColor}}"/>
                                <Setter TargetName="Check" Property="Visibility" Value="Visible"/>
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Foreground" Value="{Binding Source={StaticResource SecondaryColor}}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!-- YES NO CHECKBOX STYLE -->
        <Style x:Key="YesNoCheckBox" TargetType="{x:Type CheckBox}" BasedOn="{StaticResource NormalCheckBox}">
            <Setter Property="Content" Value="Non"/>

            <Style.Triggers>
                <Trigger Property="IsChecked" Value="True">
                    <Setter Property="Content" Value="Oui"/>
                </Trigger>
            </Style.Triggers>
        </Style>


        <!-- TEXTBOX WITH UNIT STYLE -->
        <Style TargetType="{x:Type local:TextBoxWithUnit}">
            <Setter Property="Margin" Value="0,0,10,0"/>
            <Setter Property="BorderThickness" Value="0,0,0,1"/>
            <Setter Property="VerticalAlignment" Value="Center"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Padding" Value="0,10,0,5"/>
            <Setter Property="BorderBrush" Value="#FFACACAC"/>
            <Setter Property="MaxWidth" Value="200"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type TextBox}">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="1*"/>
                                <ColumnDefinition Width="Auto"/>
                            </Grid.ColumnDefinitions>
                            <Border x:Name="border" Grid.ColumnSpan="2" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"
                                    Background="{TemplateBinding Background}" SnapsToDevicePixels="True"/>
                            <ScrollViewer x:Name="PART_ContentHost" Focusable="false" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden"/>
                            <TextBlock Grid.Column="1" Text="{Binding Unit, RelativeSource={RelativeSource AncestorType={x:Type local:TextBoxWithUnit}, Mode=FindAncestor}}" VerticalAlignment="Center"/>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter Property="Opacity" TargetName="border" Value="0.56"/>
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="BorderBrush" Value="{StaticResource SecondaryColor}"/>
                            </Trigger>
                            <Trigger Property="IsKeyboardFocused" Value="True">
                                <Setter Property="BorderBrush" Value="{StaticResource SecondaryColor}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>


        <!-- ********************************************* FLAT COMBOBOX STYLE *********************************************** -->

        <!-- Toggle Button Style -->
        <Style x:Key="ComboBoxToggleButtonStyle" TargetType="{x:Type ToggleButton}">
            <Setter Property="IsTabStop" Value="false"/>
            <Setter Property="Focusable" Value="false"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                        <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}">
                            <Border HorizontalAlignment="Right" Margin="0" Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}">
                                <Path x:Name="arrow" Data="M 0 0 L 4 6 L 8 0 Z" Fill="#FF757575" HorizontalAlignment="Center" Margin="0" VerticalAlignment="Center"/>
                            </Border>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="Button.IsPressed" Value="true">
                                <Setter Property="Fill" TargetName="arrow" Value="Black"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!-- Template de la ComboBox -->
        <ControlTemplate x:Key="ComboBoxTemplate" TargetType="{x:Type ComboBox}">
            
            <Grid x:Name="templateRoot" SnapsToDevicePixels="true">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" Width="0"/>
                </Grid.ColumnDefinitions>
                
                <Popup x:Name="PART_Popup" AllowsTransparency="true" Grid.ColumnSpan="2" IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                       Margin="1" PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" Placement="Bottom">
                    
                    <Themes:SystemDropShadowChrome x:Name="shadow" Color="Transparent" MaxHeight="{TemplateBinding MaxDropDownHeight}" MinWidth="{Binding ActualWidth, ElementName=templateRoot}">
                        <Border x:Name="dropDownBorder" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="1" Background="{TemplateBinding Background}">
                            <ScrollViewer x:Name="DropDownScrollViewer">
                                <Grid x:Name="grid" RenderOptions.ClearTypeHint="Enabled">
                                    <Canvas x:Name="canvas" HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
                                        <Rectangle x:Name="opaqueRect" Fill="{Binding Background, ElementName=dropDownBorder}" Height="{Binding ActualHeight, ElementName=dropDownBorder}"
                                                   Width="{Binding ActualWidth, ElementName=dropDownBorder}"/>
                                    </Canvas>
                                    <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                </Grid>
                            </ScrollViewer>
                        </Border>
                    </Themes:SystemDropShadowChrome>
                </Popup>
                
                <ToggleButton x:Name="toggleButton" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}"
                              Grid.ColumnSpan="2" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Style="{StaticResource ComboBoxToggleButtonStyle}"/>
                
                <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                                  Content="{TemplateBinding SelectionBoxItem}" ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}"
                                  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" IsHitTestVisible="false" Margin="{TemplateBinding Padding}"
                                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
            </Grid>
            <ControlTemplate.Triggers>
                <Trigger Property="HasDropShadow" SourceName="PART_Popup" Value="true">
                    <Setter Property="Margin" TargetName="shadow" Value="0,0,5,5"/>
                    <Setter Property="Color" TargetName="shadow" Value="#71000000"/>
                </Trigger>
                <Trigger Property="HasItems" Value="false">
                    <Setter Property="Height" TargetName="dropDownBorder" Value="95"/>
                </Trigger>
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition Property="IsGrouping" Value="true"/>
                        <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false"/>
                    </MultiTrigger.Conditions>
                    <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
                </MultiTrigger>
                <Trigger Property="ScrollViewer.CanContentScroll" SourceName="DropDownScrollViewer" Value="false">
                    <Setter Property="Canvas.Top" TargetName="opaqueRect" Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}"/>
                    <Setter Property="Canvas.Left" TargetName="opaqueRect" Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}"/>
                </Trigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>

        <!-- Default ListboxItem Style -->
        <Style x:Key="ComboBoxItem" TargetType="{x:Type ComboBoxItem}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ComboBoxItem}">
                        <Border Background="{TemplateBinding Background}">
                            <ContentPresenter Margin="5,6"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Background" Value="#FFF2F2F2"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!-- ComboBox Style -->
        <Style x:Key="FlatComboBoxStyle" TargetType="{x:Type ComboBox}">
            <Setter Property="Padding" Value="0,0,15,5"/>
            <Setter Property="Margin" Value="0,0,10,0"/>
            <Setter Property="BorderThickness" Value="0,0,0,1"/>
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="ItemContainerStyle" Value="{StaticResource ComboBoxItem}"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Template" Value="{StaticResource ComboBoxTemplate}"/>
            <Setter Property="MaxWidth" Value="200"/>
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="BorderBrush" Value="{Binding Source={StaticResource SecondaryColor}}"/>
                </Trigger>
            </Style.Triggers>
        </Style>


    </Application.Resources>
</Application>
